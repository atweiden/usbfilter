#!/bin/bash

# ----------------------------------------------------------------------------
# usbfilter: control which usb devices can connect to your linux machine
# ----------------------------------------------------------------------------

# ==============================================================================
# constants {{{

readonly USBFILTER_CONFIG_DIR="/etc/usbfilter"
readonly USBFILTER_CONFIG_WHITELIST="$USBFILTER_CONFIG_DIR/whitelist"
readonly USBFILTER_LOG_DIR="/var/log/usbfilter"
readonly USBFILTER_LOG_DENIED="$USBFILTER_LOG_DIR/denied.log"
readonly USBFILTER_LOG_HOTPLUG="$USBFILTER_LOG_DIR/hotplug.log"
readonly USBFILTER_LOG_SEARCH="$USBFILTER_LOG_DIR/search.log"

# end constants }}}
# ==============================================================================
# usage {{{

_usage_function() {
read -r -d '' _usage_string <<'EOF'
Usage:
  usbfilter [-h|--help] <command>
  usbfilter hotplug
  usbfilter scan [--authorized]
                 [--new]

Options:
  -h, --help       Show this help text
  -v, --version    Show program version

Commands:
  hotplug        Add whitelisted USB
  scan           Scan for USB
EOF
echo "$_usage_string"
}

_POSITIONAL=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      _usage
      exit 0
      ;;
    -v|--version)
      echo "$VERSION"
      exit 0
      ;;
    -t|--authorized)
      _authorized=true
      # shift past argument
      shift
      ;;
    -n|--new)
      _new=true
      shift
      ;;
    -*)
      # unknown option
      _usage
      exit 1
      ;;
    hotplug|scan)
      _POSITIONAL+=("$1")
      shift
      ;;
    *)
      # unknown command
      _usage
      exit 1
      ;;
  esac
done

if ! [[ "${#_POSITIONAL[@]}" == '1' ]]; then
  _usage
  exit 1
fi

# restore positional params
set -- "${_POSITIONAL[@]}"

# end usage }}}
# ==============================================================================

INFO() {
  echo "usbfilter#info: $*"
}

WARN() {
  echo "usbfilter#warn: $*"
}

ERRO() {
  echo "usbfilter#erro: $*"
  exit 1
}

hotplug_other() {
  :
}

hotplug_usb() {
  local _port
  local _id_product
  local _id_vendor
  local _b_interface_class
  local _search_query

  [[ "$ACTION" != "add" ]] \
    && exit
  [[ "$DEVTYPE" == "usb_device" ]] \
    && (cd "/sys/$DEVPATH/" || exit 1)
  [[ "$DEVTYPE" == "usb_interface" ]] \
    && (cd "/sys/$DEVPATH/.." || exit 1)

  _port="$(basename "$DEVPATH")"
  _id_product="$(cat idProduct)"
  _id_vendor="$(cat idVendor)"

  if [[ "$DEVTYPE" == "usb_device" ]]; then
    _search_query="$_id_vendor:$_id_product"
  fi

  if [[ "$DEVTYPE" == "usb_interface" ]]; then
    (cd "/sys/$DEVPATH/" || exit 1)
    _b_interface_class="$(cat bInterfaceClass)"
    _search_query="$_id_vendor:$_id_product:$_b_interface_class"
  fi

  echo "$_search_query" >> "$USBFILTER_LOG_SEARCH"

  grep -q "$_search_query" "$USBFILTER_CONFIG_WHITELIST" \
    || (WARN "denied $DEVPATH" >> "$USBFILTER_LOG_DENIED"; exit)

  [[ -e "/sys/$DEVPATH/authorized" ]] \
    && echo 1 > "/sys/$DEVPATH/authorized"

  echo "$_port" > /sys/bus/usb/drivers_probe
}

hotplug() {
  env >> "$USBFILTER_LOG_HOTPLUG"
  INFO "$SUBSYSTEM"
  if [[ $SUBSYSTEM == "usb" ]]; then
    hotplug_usb
  else
    hotplug_other
  fi
}

scan_authorized() {
  local _id_product
  local _id_vendor
  cd /sys/bus/usb/devices/ \
    || exit 1
  grep -v : -- * | while read -r _device; do
    _id_product="$(cat "$_device/idProduct")"
    _id_vendor="$(cat "$_device/idVendor")"
    grep "$_id_vendor:$_id_product" "$USBFILTER_CONFIG_WHITELIST" \
      && echo 1 > "$_device/authorized"
  done
}

scan_new() {
  lsusb | awk '{print $6}' | while read -r _line; do
    grep -q "$_line" "$USBFILTER_CONFIG_WHITELIST" \
      || INFO "$_line is not in whitelist yet"
  done
}

scan() {
  if [[ "$_authorized" == "true" ]];
    scan_authorized
  elif [[ "$_new" == "true" ]];
    scan_new
  else
    :
  fi
}

main() {
  [[ "$UID" == '0' ]] \
    || ERR 'Sorry, requires root privileges'
  if [[ "$1" == 'hotplug' ]]; then
    hotplug
  elif [[ "$1" == 'scan' ]]; then
    scan
  else
    # unknown command
    _usage
    exit 1
  fi
}

main "$1"

# vim: set filetype=sh foldmethod=marker foldlevel=0 nowrap:
